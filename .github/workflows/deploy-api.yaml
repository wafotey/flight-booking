name: Deploy .NET Application (Flight Booking System) to Azure and Push to ACR

on:
  push:
    branches:
      - main  # Trigger the action when pushing to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '9.0'

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v2
        with:
          login-server: ${{ vars.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # Set IMAGE_TAG from GITHUB_SHA
      - name: Set IMAGE_TAG environment variable
        run: echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - name: Build Docker image
        env: 
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          ACR_REGISTRY: ${{ vars.ACR_LOGIN_SERVER }}
        run: |
          docker build -f FlightBooking.Application/Dockerfile -t ${{ env.ACR_REGISTRY }}/flight-booking-app:${{ env.IMAGE_TAG }} -t ${{ env.ACR_REGISTRY }}/flight-booking-app:latest .

      - name: Push Docker image to ACR
        run: |
          docker push ${{ vars.ACR_LOGIN_SERVER }}/flight-booking-app:${{ env.IMAGE_TAG }}
          docker push ${{ vars.ACR_LOGIN_SERVER }}/flight-booking-app:latest

      - name: Login into Azure 
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
 
      - name: Deploy to Azure container app
        uses: azure/container-apps-deploy-action@v1
        with:
          registryUrl: ${{ vars.ACR_LOGIN_SERVER }}
          imageToDeploy: ${{ vars.ACR_LOGIN_SERVER }}/flight-booking-app:${{ env.IMAGE_TAG }}
          targetPort: 80
          ingress: external
          containerAppName: dept-dev-container-app-flight
          containerAppEnvironment: DeptDevContainerAppEnvironmentFlightBooking
          resourceGroup: dept-dev-resource-group-flight-booking 
          environmentVariables: |
            ASPNETCORE_ENVIRONMENT=Development
            ASPNETCORE_URL=https://+:80
            ConnectionStrings__BookingDbContext=${{ secrets.DB_CONNECTION_STRING }}

      - name: Bundle EF Migrations
        env:
          ASPNETCORE_ENVIRONMENT: Development
          ConnectionStrings__BookingDbContext: ${{ secrets.DB_CONNECTION_STRING }}
        run: |
          dotnet tool install --global dotnet-ef
          dotnet ef migrations bundle --project FlightBooking.Application/FlightBooking.Application.csproj --output migrations/bundle

      - name: Run EF Migrations
        run: ./migrations/bundle --connection ${{ secrets.DB_CONNECTION_STRING }}
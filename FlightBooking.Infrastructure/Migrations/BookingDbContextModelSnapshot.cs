// <auto-generated />
using System;
using FlightBooking.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlightBooking.Infrastructure.Migrations
{
    [DbContext(typeof(BookingDbContext))]
    partial class BookingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlightBooking.Domain.Aggregates.BookingAggregate.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BookingStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FlightSeatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PassportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookingStatusId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FlightId");

                    b.HasIndex("PassportId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("FlightBooking.Domain.Aggregates.BookingAggregate.BookingStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("BookingStatus");
                });

            modelBuilder.Entity("FlightBooking.Domain.Aggregates.BookingAggregate.Dependent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("Dependent");
                });

            modelBuilder.Entity("FlightBooking.Domain.Aggregates.BookingAggregate.Passport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("IssueDate")
                        .HasColumnType("date");

                    b.Property<int>("IssuingCountryId")
                        .HasColumnType("int");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("PassportNumber");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique()
                        .HasFilter("[BookingId] IS NOT NULL");

                    b.HasIndex("IssuingCountryId");

                    b.HasIndex("NationalityId");

                    b.ToTable("Passport");
                });

            modelBuilder.Entity("FlightBooking.Domain.Aggregates.CustomerAggregate.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("FlightBooking.Domain.Aggregates.FlightAggregate.Flight", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlightName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("FlightReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FlightStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FlightStatusId");

                    b.ToTable("Flight");
                });

            modelBuilder.Entity("FlightBooking.Domain.Aggregates.FlightAggregate.FlightStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("FlightStatus");
                });

            modelBuilder.Entity("FlightBooking.Domain.Aggregates.FlightCancellationPenaltyAggregate.FlightCancellationPenalty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("FlightCancellationPenalty");
                });

            modelBuilder.Entity("FlightBooking.Domain.Aggregates.FlightCancellationPenaltySettingsAggregate.FlightCancellationPenaltySettings", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FlightCancellationPenaltySettings");
                });

            modelBuilder.Entity("FlightBooking.Domain.Aggregates.NoShowPenaltyAggregate.NoShowPenalty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlyingStatusId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("FlyingStatusId");

                    b.HasIndex("SeasonId");

                    b.ToTable("NoShowPenalty");
                });

            modelBuilder.Entity("FlightBooking.Domain.Aggregates.NoShowPenaltySettingsAggregate.NoShowPenaltySettings", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("NoShowPenaltySettings");
                });

            modelBuilder.Entity("FlightBooking.Domain.SharedKennel.Enumerations.Country", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Alpha2Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Alpha3Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CapitalCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumericCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("FlightBooking.Domain.SharedKennel.Enumerations.Currency", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("FlightBooking.Domain.SharedKennel.Enumerations.FlyingStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("FlyingStatus");
                });

            modelBuilder.Entity("FlightBooking.Domain.SharedKennel.Enumerations.Month", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Month");
                });

            modelBuilder.Entity("FlightBooking.Domain.SharedKennel.Enumerations.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Alpha2Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Alpha3Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Numeric")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Nationality");
                });

            modelBuilder.Entity("FlightBooking.Domain.SharedKennel.Enumerations.Season", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Season");
                });

            modelBuilder.Entity("FlightBooking.Domain.SharedKennel.Enumerations.VisaType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("VisaType");
                });

            modelBuilder.Entity("FlightBooking.Domain.Aggregates.BookingAggregate.Booking", b =>
                {
                    b.HasOne("FlightBooking.Domain.Aggregates.BookingAggregate.BookingStatus", "BookingStatus")
                        .WithMany()
                        .HasForeignKey("BookingStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightBooking.Domain.Aggregates.CustomerAggregate.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightBooking.Domain.Aggregates.FlightAggregate.Flight", null)
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightBooking.Domain.Aggregates.BookingAggregate.Passport", "Passport")
                        .WithMany()
                        .HasForeignKey("PassportId");

                    b.OwnsOne("FlightBooking.Domain.Aggregates.BookingAggregate.Visa", "Visa", b1 =>
                        {
                            b1.Property<Guid>("BookingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateOnly>("ExpiryDate")
                                .HasMaxLength(10)
                                .HasColumnType("date")
                                .HasColumnName("ExpiryDate");

                            b1.Property<DateOnly>("IssueDate")
                                .HasMaxLength(10)
                                .HasColumnType("date")
                                .HasColumnName("IssueDate");

                            b1.Property<int>("IssuingCountryId")
                                .HasColumnType("int");

                            b1.Property<string>("VisaNumber")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("VisaNumber");

                            b1.Property<int>("VisaTypeId")
                                .HasColumnType("int");

                            b1.HasKey("BookingId");

                            b1.HasIndex("IssuingCountryId");

                            b1.HasIndex("VisaTypeId");

                            b1.ToTable("Booking");

                            b1.WithOwner()
                                .HasForeignKey("BookingId");

                            b1.HasOne("FlightBooking.Domain.SharedKennel.Enumerations.Country", "IssuingCountry")
                                .WithMany()
                                .HasForeignKey("IssuingCountryId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("FlightBooking.Domain.SharedKennel.Enumerations.VisaType", "VisaType")
                                .WithMany()
                                .HasForeignKey("VisaTypeId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("IssuingCountry");

                            b1.Navigation("VisaType");
                        });

                    b.Navigation("BookingStatus");

                    b.Navigation("Passport");

                    b.Navigation("Visa");
                });

            modelBuilder.Entity("FlightBooking.Domain.Aggregates.BookingAggregate.Dependent", b =>
                {
                    b.HasOne("FlightBooking.Domain.Aggregates.BookingAggregate.Booking", null)
                        .WithMany("Dependents")
                        .HasForeignKey("BookingId");
                });

            modelBuilder.Entity("FlightBooking.Domain.Aggregates.BookingAggregate.Passport", b =>
                {
                    b.HasOne("FlightBooking.Domain.Aggregates.BookingAggregate.Booking", null)
                        .WithOne()
                        .HasForeignKey("FlightBooking.Domain.Aggregates.BookingAggregate.Passport", "BookingId");

                    b.HasOne("FlightBooking.Domain.SharedKennel.Enumerations.Country", "IssuingCountry")
                        .WithMany()
                        .HasForeignKey("IssuingCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightBooking.Domain.SharedKennel.Enumerations.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IssuingCountry");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("FlightBooking.Domain.Aggregates.CustomerAggregate.Customer", b =>
                {
                    b.OwnsOne("FlightBooking.Domain.Aggregates.CustomerAggregate.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("City");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customer");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("FlightBooking.Domain.Aggregates.FlightAggregate.Flight", b =>
                {
                    b.HasOne("FlightBooking.Domain.Aggregates.FlightAggregate.FlightStatus", "FlightStatus")
                        .WithMany()
                        .HasForeignKey("FlightStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FlightBooking.Domain.Aggregates.FlightAggregate.Capacity", "Capacity", b1 =>
                        {
                            b1.Property<Guid>("FlightId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("AvailableSeatsForBusiness")
                                .HasColumnType("int")
                                .HasColumnName("AvailableSeatsForBusiness");

                            b1.Property<int>("AvailableSeatsForEconomy")
                                .HasColumnType("int")
                                .HasColumnName("AvailableSeatsForEconomy");

                            b1.Property<int>("AvailableSeatsForFirstClass")
                                .HasColumnType("int")
                                .HasColumnName("AvailableSeatsForFirstClass");

                            b1.HasKey("FlightId");

                            b1.ToTable("Flight");

                            b1.WithOwner()
                                .HasForeignKey("FlightId");
                        });

                    b.OwnsOne("FlightBooking.Domain.Aggregates.FlightAggregate.FlightRoute", "FlightRoute", b1 =>
                        {
                            b1.Property<Guid>("FlightId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("FlightId");

                            b1.ToTable("Flight");

                            b1.WithOwner()
                                .HasForeignKey("FlightId");

                            b1.OwnsOne("FlightBooking.Domain.Aggregates.FlightAggregate.Location", "Destination", b2 =>
                                {
                                    b2.Property<Guid>("FlightRouteFlightId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("City")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("DestinationCity");

                                    b2.Property<string>("Code")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("DestinationCode");

                                    b2.HasKey("FlightRouteFlightId");

                                    b2.ToTable("Flight");

                                    b2.WithOwner()
                                        .HasForeignKey("FlightRouteFlightId");
                                });

                            b1.OwnsOne("FlightBooking.Domain.Aggregates.FlightAggregate.Location", "Origin", b2 =>
                                {
                                    b2.Property<Guid>("FlightRouteFlightId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("City")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("OriginCity");

                                    b2.Property<string>("Code")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("OriginCode");

                                    b2.HasKey("FlightRouteFlightId");

                                    b2.ToTable("Flight");

                                    b2.WithOwner()
                                        .HasForeignKey("FlightRouteFlightId");
                                });

                            b1.Navigation("Destination")
                                .IsRequired();

                            b1.Navigation("Origin")
                                .IsRequired();
                        });

                    b.OwnsOne("FlightBooking.Domain.Aggregates.FlightAggregate.Onboarding", "Onboarding", b1 =>
                        {
                            b1.Property<Guid>("FlightId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("EndAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("OnboardingEndAt");

                            b1.Property<DateTime>("StartAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("OnboardingStartAt");

                            b1.HasKey("FlightId");

                            b1.ToTable("Flight");

                            b1.WithOwner()
                                .HasForeignKey("FlightId");
                        });

                    b.Navigation("Capacity")
                        .IsRequired();

                    b.Navigation("FlightRoute")
                        .IsRequired();

                    b.Navigation("FlightStatus");

                    b.Navigation("Onboarding")
                        .IsRequired();
                });

            modelBuilder.Entity("FlightBooking.Domain.Aggregates.FlightCancellationPenaltyAggregate.FlightCancellationPenalty", b =>
                {
                    b.HasOne("FlightBooking.Domain.Aggregates.BookingAggregate.Booking", null)
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FlightBooking.Domain.SharedKennel.ValueObjects.Money", "CalculatedPenalty", b1 =>
                        {
                            b1.Property<Guid>("FlightCancellationPenaltyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Amount");

                            b1.Property<int>("CurrencyId")
                                .HasColumnType("int");

                            b1.HasKey("FlightCancellationPenaltyId");

                            b1.HasIndex("CurrencyId");

                            b1.ToTable("FlightCancellationPenalty");

                            b1.HasOne("FlightBooking.Domain.SharedKennel.Enumerations.Currency", "Currency")
                                .WithMany()
                                .HasForeignKey("CurrencyId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("FlightCancellationPenaltyId");

                            b1.Navigation("Currency");
                        });

                    b.OwnsOne("FlightBooking.Domain.SharedKennel.ValueObjects.Percentage", "Percentage", b1 =>
                        {
                            b1.Property<Guid>("FlightCancellationPenaltyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Percentage");

                            b1.HasKey("FlightCancellationPenaltyId");

                            b1.ToTable("FlightCancellationPenalty");

                            b1.WithOwner()
                                .HasForeignKey("FlightCancellationPenaltyId");
                        });

                    b.Navigation("CalculatedPenalty")
                        .IsRequired();

                    b.Navigation("Percentage")
                        .IsRequired();
                });

            modelBuilder.Entity("FlightBooking.Domain.Aggregates.FlightCancellationPenaltySettingsAggregate.FlightCancellationPenaltySettings", b =>
                {
                    b.OwnsOne("FlightBooking.Domain.SharedKennel.ValueObjects.Percentage", "BusinessClassPenaltyPercentage", b1 =>
                        {
                            b1.Property<Guid>("FlightCancellationPenaltySettingsId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("BusinessClassPenaltyPercentage");

                            b1.HasKey("FlightCancellationPenaltySettingsId");

                            b1.ToTable("FlightCancellationPenaltySettings");

                            b1.WithOwner()
                                .HasForeignKey("FlightCancellationPenaltySettingsId");
                        });

                    b.OwnsOne("FlightBooking.Domain.SharedKennel.ValueObjects.Percentage", "EconomyClassPenaltyPercentage", b1 =>
                        {
                            b1.Property<Guid>("FlightCancellationPenaltySettingsId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("EconomyClassPenaltyPercentage");

                            b1.HasKey("FlightCancellationPenaltySettingsId");

                            b1.ToTable("FlightCancellationPenaltySettings");

                            b1.WithOwner()
                                .HasForeignKey("FlightCancellationPenaltySettingsId");
                        });

                    b.OwnsOne("FlightBooking.Domain.SharedKennel.ValueObjects.Percentage", "FirstClassPenaltyPercentage", b1 =>
                        {
                            b1.Property<Guid>("FlightCancellationPenaltySettingsId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("FirstClassPenaltyPercentage");

                            b1.HasKey("FlightCancellationPenaltySettingsId");

                            b1.ToTable("FlightCancellationPenaltySettings");

                            b1.WithOwner()
                                .HasForeignKey("FlightCancellationPenaltySettingsId");
                        });

                    b.Navigation("BusinessClassPenaltyPercentage")
                        .IsRequired();

                    b.Navigation("EconomyClassPenaltyPercentage")
                        .IsRequired();

                    b.Navigation("FirstClassPenaltyPercentage")
                        .IsRequired();
                });

            modelBuilder.Entity("FlightBooking.Domain.Aggregates.NoShowPenaltyAggregate.NoShowPenalty", b =>
                {
                    b.HasOne("FlightBooking.Domain.Aggregates.BookingAggregate.Booking", null)
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightBooking.Domain.SharedKennel.Enumerations.FlyingStatus", "FlyingStatus")
                        .WithMany()
                        .HasForeignKey("FlyingStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightBooking.Domain.SharedKennel.Enumerations.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FlightBooking.Domain.SharedKennel.ValueObjects.Money", "CalculatedPenalty", b1 =>
                        {
                            b1.Property<Guid>("NoShowPenaltyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("CalculatedPenalty");

                            b1.Property<int>("CurrencyId")
                                .HasColumnType("int");

                            b1.HasKey("NoShowPenaltyId");

                            b1.HasIndex("CurrencyId");

                            b1.ToTable("NoShowPenalty");

                            b1.HasOne("FlightBooking.Domain.SharedKennel.Enumerations.Currency", "Currency")
                                .WithMany()
                                .HasForeignKey("CurrencyId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("NoShowPenaltyId");

                            b1.Navigation("Currency");
                        });

                    b.OwnsOne("FlightBooking.Domain.SharedKennel.ValueObjects.Percentage", "Percentage", b1 =>
                        {
                            b1.Property<Guid>("NoShowPenaltyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Percentage");

                            b1.HasKey("NoShowPenaltyId");

                            b1.ToTable("NoShowPenalty");

                            b1.WithOwner()
                                .HasForeignKey("NoShowPenaltyId");
                        });

                    b.Navigation("CalculatedPenalty")
                        .IsRequired();

                    b.Navigation("FlyingStatus");

                    b.Navigation("Percentage")
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("FlightBooking.Domain.Aggregates.NoShowPenaltySettingsAggregate.NoShowPenaltySettings", b =>
                {
                    b.OwnsOne("FlightBooking.Domain.SharedKennel.ValueObjects.Percentage", "BusinessClassPenaltyPercentage", b1 =>
                        {
                            b1.Property<Guid>("NoShowPenaltySettingsId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("BusinessClassPenaltyPercentage");

                            b1.HasKey("NoShowPenaltySettingsId");

                            b1.ToTable("NoShowPenaltySettings");

                            b1.WithOwner()
                                .HasForeignKey("NoShowPenaltySettingsId");
                        });

                    b.OwnsOne("FlightBooking.Domain.SharedKennel.ValueObjects.Percentage", "EconomyClassPenaltyPercentage", b1 =>
                        {
                            b1.Property<Guid>("NoShowPenaltySettingsId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("EconomyClassPenaltyPercentage");

                            b1.HasKey("NoShowPenaltySettingsId");

                            b1.ToTable("NoShowPenaltySettings");

                            b1.WithOwner()
                                .HasForeignKey("NoShowPenaltySettingsId");
                        });

                    b.OwnsOne("FlightBooking.Domain.SharedKennel.ValueObjects.Percentage", "FirstClassPenaltyPercentage", b1 =>
                        {
                            b1.Property<Guid>("NoShowPenaltySettingsId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("FirstClassPenaltyPercentage");

                            b1.HasKey("NoShowPenaltySettingsId");

                            b1.ToTable("NoShowPenaltySettings");

                            b1.WithOwner()
                                .HasForeignKey("NoShowPenaltySettingsId");
                        });

                    b.OwnsOne("FlightBooking.Domain.SharedKennel.ValueObjects.Percentage", "FrequentFlyersPenaltyPercentage", b1 =>
                        {
                            b1.Property<Guid>("NoShowPenaltySettingsId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("FrequentFlyersPenaltyPercentage");

                            b1.HasKey("NoShowPenaltySettingsId");

                            b1.ToTable("NoShowPenaltySettings");

                            b1.WithOwner()
                                .HasForeignKey("NoShowPenaltySettingsId");
                        });

                    b.OwnsOne("FlightBooking.Domain.SharedKennel.ValueObjects.Percentage", "NonFrequentFlyersPenaltyPercentage", b1 =>
                        {
                            b1.Property<Guid>("NoShowPenaltySettingsId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("NonFrequentFlyersPenaltyPercentage");

                            b1.HasKey("NoShowPenaltySettingsId");

                            b1.ToTable("NoShowPenaltySettings");

                            b1.WithOwner()
                                .HasForeignKey("NoShowPenaltySettingsId");
                        });

                    b.OwnsOne("FlightBooking.Domain.SharedKennel.ValueObjects.Percentage", "PeakSeasonPenaltyPercentage", b1 =>
                        {
                            b1.Property<Guid>("NoShowPenaltySettingsId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("PeakSeasonPenaltyPercentage");

                            b1.HasKey("NoShowPenaltySettingsId");

                            b1.ToTable("NoShowPenaltySettings");

                            b1.WithOwner()
                                .HasForeignKey("NoShowPenaltySettingsId");
                        });

                    b.Navigation("BusinessClassPenaltyPercentage")
                        .IsRequired();

                    b.Navigation("EconomyClassPenaltyPercentage")
                        .IsRequired();

                    b.Navigation("FirstClassPenaltyPercentage")
                        .IsRequired();

                    b.Navigation("FrequentFlyersPenaltyPercentage")
                        .IsRequired();

                    b.Navigation("NonFrequentFlyersPenaltyPercentage")
                        .IsRequired();

                    b.Navigation("PeakSeasonPenaltyPercentage")
                        .IsRequired();
                });

            modelBuilder.Entity("FlightBooking.Domain.Aggregates.BookingAggregate.Booking", b =>
                {
                    b.Navigation("Dependents");
                });
#pragma warning restore 612, 618
        }
    }
}
